@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rev: <http://purl.org/stuff/rev#> .
@prefix schema: <http://schema.org/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix d2rq: <http://www.wiwiss.fu-berlin.de/suhl/bizer/D2RQ/0.1#> .
@prefix prov: <http://www.w3.org/ns/prov#> .

@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix vann: <http://purl.org/vocab/vann/> .
@prefix voaf: <http://purl.org/vocommons/voaf#> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix cc: <http://creativecommons.org/ns#>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.
@prefix seas: <https://w3id.org/seas/> .
@prefix time: <http://www.w3.org/2006/time#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix brick: <https://brickschema.org/schema/1.1/Brick#> .
@prefix plt: <https://w3id.org/platoon/>.
@prefix oema: <http://www.purl.org/oema/ontologynetwork#> .
@prefix s4bldg: <https://w3id.org/def/saref4bldg#> .
@prefix cim: <http://www.iec.ch/TC57/CIM#> .
@prefix gn: <https://www.geonames.org/ontology#> .
@prefix sch: <https://schema.org/> .
@prefix wgs84_pos: <http://www.w3.org/2003/01/geo/wgs84_pos#> .

@prefix unit: <http://www.qudt.org/2.1/vocab/unit/> .
@prefix qudt: <http://www.qudt.org/2.1/schema/qudt/> .
@prefix ontowind: <http://www.semanticweb.org/ontologies/2011/9/Ontology1318785573683.owl#> .
@prefix saref: <https://saref.etsi.org/core/> .
@prefix gn: <https://www.geonames.org/ontology#> .


@base <https://w3id.org/platoon/> .

<#PLATOON_DB> a d2rq:Database;
  d2rq:jdbcDSN "platoon_db"; # the "jbdc:mysql:// part is ignored
  d2rq:jdbcDriver "com.mysql.cj.jdbc.Driver"; # this is ignored  
  d2rq:username "root";
  d2rq:password "1234" .

<#PUPIN_WindFarmWeatherMapping> a rr:TriplesMap;
    rml:logicalSource [
      rml:source <#PLATOON_DB>;
      rr:sqlVersion rr:SQL2008;
      rml:query "SELECT DISTINCT plants.id as plant_id,            plants.name as plant_name,             weather_locations.lat as lat,           weather_locations.lon as lon,           weather_locations.city as city,           assets.asset_name as asset_name,           country.country_code as ccode,           eic_functions.eic_type_function_acronym as eic_func_acronym,           organization.organization_short_name as organization_short_name,           organization.organization_name as organization_name,           assets.id as asset_id         FROM `plants`                JOIN weather_locations              ON plants.weather_location_id = weather_locations.id            JOIN assets              ON plants.asset_id = assets.id           JOIN organization              ON assets.organization_id = organization.id           JOIN country              ON organization.country_id = country.id            JOIN eic_functions              ON assets.eic_function_id = eic_functions.id          WHERE  eic_functions.eic_type_function_acronym = 'RES-W'"
    ];

    rr:subjectMap [
      rr:template "http://platoon.eu/WindFarm/Pilot2A/{plant_id}_{asset_name}_{plant_name}_{city}";
      rr:class plt:WindFarm, seas:FeatureOfInterest ;
    ];

    rr:predicateObjectMap [
      rr:predicate plt:hasWindSpeed;
      rr:objectMap [
        rr:template "http://platoon.eu/WindFarm/Pilot2A/Observation/{plant_id}/WindSpeedProperty";
      ]
    ];

    rr:predicateObjectMap [
      rr:predicate rdfs:label ;
      rr:objectMap [
        rml:reference "plant_name"
      ]
    ]
    .


################################################
#########   WindSpeedProperty Observations ###########
#################################################

<#PUPIN_ObservedWindSpeedPropertyMapping> a rr:TriplesMap;
    rml:logicalSource [
      rml:source <#PLATOON_DB>;
      rr:sqlVersion rr:SQL2008 ;      
      rml:query """
          SELECT DISTINCT 
              plants.name as plant_name,  
              wind_plant_weather_data.plant_id as plant_id,
              wind_plant_weather_data.timestamp as timestamp,
              weather_locations.lon as lon,
              weather_locations.lat as lat,
              weather_locations.city as city,
              assets.asset_name as asset_name
          FROM `plants`     
              JOIN wind_plant_weather_data 
                ON plants.id = wind_plant_weather_data.plant_id 
              JOIN weather_locations 
                ON plants.weather_location_id = weather_locations.id
              JOIN assets 
                ON plants.asset_id = assets.id
      """
    ];
  
     rr:subjectMap [
      rr:template "http://platoon.eu/WindFarm/Pilot2A/Observation/{plant_id}/WindSpeedProperty";
      rr:class seas:WindSpeedProperty
    ];
    rr:predicateObjectMap [
      rr:predicate  seas:isPropertyOf ;
      rr:objectMap [
        rr:template "http://platoon.eu/WindFarm/Pilot2A/{plant_id}_{asset_name}_{plant_name}_{city}"
        # rr:parentTriplesMap <#PUPIN_WindFarmWeatherMapping>;
        # rr:joinCondition [
        #  rr:child "plant_id";
        #  rr:parent "plant_id"
        # ]
      ]
    ];
    rr:predicateObjectMap [
      rr:predicate prov:wasGeneratedBy;
      rr:objectMap [
        # rr:parentTriplesMap <#PUPIN_WeatherStationMapping>
        rr:template "http://platoon.eu/WeatherBit/WeatherStation/{lat}_{lon}_{plant_name}";
      ]
    ]; 
    rr:predicateObjectMap [
      rr:predicate  plt:datasource;
      rr:objectMap [
        rr:constant "http://platoon.eu/DataSource/PUPIN-RES-PROD";
      rr:termType rr:IRI
      ]
    ];

    rr:predicateObjectMap [
      rr:predicate  seas:evaluation ;
      rr:objectMap [
        # rr:parentTriplesMap <#PUPIN_ObservedWindSpeedEvaluationMapping>;
        rr:template "http://platoon.eu/WindFarm/Pilot2A/Observation/{plant_id}/WindSpeedEvaluation/{timestamp}";
      ]
    ] 
    .    


<#PUPIN_ObservedWindSpeedEvaluationMapping> a rr:TriplesMap;
    rml:logicalSource [
      rml:source <#PLATOON_DB>;      
      rr:sqlVersion rr:SQL2008;
      rr:tableName "wind_plant_weather_data"
    ];
  
     rr:subjectMap [
      rr:template "http://platoon.eu/WindFarm/Pilot2A/Observation/{plant_id}/WindSpeedEvaluation/{timestamp}";
      rr:class seas:WindSpeedEvaluation
    ];
    
    rr:predicateObjectMap [
      rr:predicate seas:hasTemporalContext ;
      rr:objectMap [
        # rr:parentTriplesMap <#PUPIN_TemporalContextMapping> ;         
        rr:template "http://platoon.eu/TemporalContext/{timestamp}";        
      ]
    ];

    rr:predicateObjectMap [
      rr:predicate seas:evaluatedSimpleValue ;
      rr:objectMap [
        rml:reference "wind_spd";
        rr:datatype xsd:double
      ]
    ];


    rr:predicateObjectMap [
      rr:predicate qudt:unit;
      rr:objectMap [
        rr:constant unit:M-PER-SEC
      ]
    ]
    .    