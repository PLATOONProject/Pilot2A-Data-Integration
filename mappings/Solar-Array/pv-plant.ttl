@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rev: <http://purl.org/stuff/rev#> .
@prefix schema: <http://schema.org/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix d2rq: <http://www.wiwiss.fu-berlin.de/suhl/bizer/D2RQ/0.1#> .

@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix vann: <http://purl.org/vocab/vann/> .
@prefix voaf: <http://purl.org/vocommons/voaf#> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix cc: <http://creativecommons.org/ns#>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.
@prefix seas: <https://w3id.org/seas/> .
@prefix time: <http://www.w3.org/2006/time#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix brick: <https://brickschema.org/schema/1.1/Brick#> .
@prefix plt: <https://w3id.org/platoon/>.
@prefix oema: <http://www.purl.org/oema/ontologynetwork#> .
@prefix s4bldg: <https://w3id.org/def/saref4bldg#> .
@prefix cim: <http://www.iec.ch/TC57/CIM#> .
@prefix gn: <https://www.geonames.org/ontology#> .
@prefix sch: <https://schema.org/> .
@prefix wgs84_pos: <http://www.w3.org/2003/01/geo/wgs84_pos#> .

@prefix unit: <http://www.qudt.org/2.1/vocab/unit/> .
@prefix qudt: <http://www.qudt.org/2.1/schema/qudt/> .
@prefix ontowind: <http://www.semanticweb.org/ontologies/2011/9/Ontology1318785573683.owl#> .
@prefix saref: <https://saref.etsi.org/core/> .
@prefix gn: <https://www.geonames.org/ontology#> .


@base <https://w3id.org/platoon/> .

<#PLATOON_DB> a d2rq:Database;
  d2rq:jdbcDSN "platoon_db"; # the "jbdc:mysql:// part is ignored
  d2rq:jdbcDriver "com.mysql.cj.jdbc.Driver"; # this is ignored
  d2rq:username "root";
  d2rq:password "1234" .


<#PUPIN_PVPlantMapping> a rr:TriplesMap;
    rml:logicalSource [
      rml:source <#PLATOON_DB>;
      rr:sqlVersion rr:SQL2008;
      rml:query  """
        SELECT DISTINCT
            plants.id AS plant_id,
            plants.name AS plant_name,
            weather_locations.lat AS lat,
            weather_locations.lon AS lon,
            weather_locations.city AS city,
            assets.asset_name AS asset_name,
            country.country_code AS ccode,
            eic_functions.eic_type_function_acronym AS eic_func_acronym,
            organization.organization_short_name AS organization_short_name,
            organization.organization_name AS organization_name,
            assets.id AS asset_id
        FROM
            `plants`
            JOIN weather_locations ON plants.weather_location_id = weather_locations.id
            JOIN assets ON plants.asset_id = assets.id
            JOIN organization ON assets.organization_id = organization.id
            JOIN country ON organization.country_id = country.id
            JOIN eic_functions ON assets.eic_function_id = eic_functions.id
        WHERE
            eic_functions.eic_type_function_acronym = 'RES-PV'
      """
    ];

    rr:subjectMap [
      rr:template "http://platoon.eu/SolarArray/Pilot2A/{plant_id}_{asset_name}_{plant_name}_{city}";
      rr:class seas:SolarArray, seas:FeatureOfInterest, seas:Zone ;
    ];

    rr:predicateObjectMap [
      rr:predicate sch:location ;
      rr:objectMap [
        rr:template "http://platoon.eu/Location/{lat}_{lon}"
      ]
    ];

    rr:predicateObjectMap [
      rr:predicate seas:connectedTo ;
      rr:objectMap [
        rr:template "http://platoon.eu/ControlArea/{ccode}"
      ]
    ];

    rr:predicateObjectMap [
      rr:predicate seas:isMemberOf ;
      rr:objectMap [
        rr:template "http://platoon.eu/ControlArea/Asset/{asset_name}"
      ]
    ];

    rr:predicateObjectMap [
      rr:predicate rdfs:label ;
      rr:objectMap [
        rml:reference "plant_name"
      ]
    ]
    .

<#PUPIN_SolarPanelMapping> a rr:TriplesMap;
    rml:logicalSource [
      rml:source <#PLATOON_DB>;
      rr:sqlVersion rr:SQL2008;
      rml:query """
        SELECT DISTINCT 
           CAST(plants.id AS CHAR(20)) AS plant_id,
           CAST(systems.id AS CHAR(20))  AS system_id,
           systems.name AS genUnitName,
           country.country_code AS ccode,
           plants.name AS plant_name,
           assets.asset_name as asset_name,
          weather_locations.city AS city,
          weather_locations.lat AS lat,
          weather_locations.lon AS lon
        FROM `systems`
           JOIN system_types ON systems.system_type_id = system_types.id
           JOIN plants ON systems.plant_id = plants.id
           JOIN weather_locations ON plants.weather_location_id = weather_locations.id
           JOIN assets ON assets.id = plants.asset_id
           JOIN organization ON assets.organization_id = organization.id
           JOIN country ON country.id = organization.country_id
           JOIN eic_functions ON assets.eic_function_id = eic_functions.id
        WHERE
           system_types.system_group = 'GeneratingUnit' AND 
           eic_functions.eic_type_function_acronym = 'RES-PV'
      """
    ];

    rr:subjectMap [
      rr:template "http://platoon.eu/Plant/SolarPanel/Pilot2A/{plant_id}_{asset_name}_{plant_name}_{city}/SolarPanel_{system_id}";
      rr:class seas:SolarPanel, cim:SolarGeneratingUnit, cim:GeneratingUnit, cim:Plant, seas:ElectricPowerProducer, seas:ElectricPowerSystem ;
    ];

    rr:predicateObjectMap [
      rr:predicate sch:location ;
      rr:objectMap [
        rr:template "http://platoon.eu/Location/{lat}_{lon}"
      ]
    ];

    rr:predicateObjectMap [
      rr:predicate seas:isMemberOf ;
      rr:objectMap [
        rr:template "http://platoon.eu/SolarArray/Pilot2A/{plant_id}_{asset_name}_{plant_name}_{city}"
      ]
    ];

    rr:predicateObjectMap [
      rr:predicate seas:connectedTo ;
      rr:objectMap [
        rr:template "http://platoon.eu/SolarArray/Pilot2A/{plant_id}_{asset_name}_{plant_name}_{city}"
      ]
    ]
    .

<#PUPIN_InverterMapping> a rr:TriplesMap;
    rml:logicalSource [
      rml:source <#PLATOON_DB>;
      rr:sqlVersion rr:SQL2008;
      rml:query """
        SELECT DISTINCT 
           CAST(plants.id AS CHAR(20)) AS plant_id,
           CAST(systems.id AS CHAR(20))  AS system_id,
           systems.name AS genUnitName,
           country.country_code AS ccode,
           plants.name AS plant_name,
           assets.asset_name as asset_name,
          weather_locations.city AS city,
          weather_locations.lat AS lat,
          weather_locations.lon AS lon
        FROM `systems`
           JOIN system_types ON systems.system_type_id = system_types.id
           JOIN plants ON systems.plant_id = plants.id
           JOIN weather_locations ON plants.weather_location_id = weather_locations.id
           JOIN assets ON assets.id = plants.asset_id
           JOIN organization ON assets.organization_id = organization.id
           JOIN country ON country.id = organization.country_id
           JOIN eic_functions ON assets.eic_function_id = eic_functions.id
        WHERE
           system_types.system_group = 'GeneratingUnit' AND 
           eic_functions.eic_type_function_acronym = 'RES-PV'
      """
    ];

    rr:subjectMap [
      rr:template "http://platoon.eu/SolarInverter/Pilot2A/{plant_id}_{system_id}_{plant_name}_{city}/SolarPanel_{system_id}/{genUnitName}";
      rr:class plt:SolarInverter ;
    ];

    rr:predicateObjectMap [
      rr:predicate seas:connectedTo ;
      rr:objectMap [
        rr:template "http://platoon.eu/Plant/SolarPanel/Pilot2A/{plant_id}_{asset_name}_{plant_name}_{city}/SolarPanel_{system_id}"
      ]
    ];

    rr:predicateObjectMap [
      rr:predicate rdfs:label ;
      rr:objectMap [
        rml:reference "genUnitName"
      ]
    ].
<#PUPIN_WeatherStationMapping> a rr:TriplesMap;
    rml:logicalSource [
      rml:source <#PLATOON_DB>;
      rr:sqlVersion rr:SQL2008;
      rml:query """
          SELECT DISTINCT 
            plants.name as plant_name,  
              weather_locations.lat as lat,
              weather_locations.lon as lon
          FROM `plants`     
              JOIN weather_locations 
                ON plants.weather_location_id = weather_locations.id 
      """
      
    ];

    rr:subjectMap [
      rr:template "http://platoon.eu/PUPIN-RES-PROD/WeatherStation/{lat}_{lon}_{plant_name}";
      rr:class plt:WeatherStation
    ];

    rr:predicateObjectMap [
      rr:predicate sch:location;
      rr:objectMap [
        # rr:parentTriplesMap <#PUPIN_LocationsMapping>
        rr:template "http://platoon.eu/Location/{lat}_{lon}";
      ]
    ];

    rr:predicateObjectMap [
      rr:predicate rdfs:label ;
      rr:objectMap [
        rml:reference  "plant_name"
      ]
    ]
    .